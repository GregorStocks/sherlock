@ref "C:\Program Files\Microsoft XNA\XNA Game Studio\v3.1\References\Windows\x86\Microsoft.Xna.Framework.dll"
@ref "C:\Program Files\Microsoft XNA\XNA Game Studio\v3.1\References\Windows\x86\Microsoft.Xna.Framework.Game.dll"
@ref "C:\Users\me\code\sherlock\bin\Lidgren.Network.dll"

use Lidgren.Network
use Microsoft.Xna.Framework
use Microsoft.Xna.Framework.Graphics
use Microsoft.Xna.Framework.Input

class Sprite
	var _texture as Texture2D
	var _batch as SpriteBatch
	var _e as Entity
	var _eid as int
	var _client as NetClient

	cue init(texture as Texture2D, batch as SpriteBatch, client as NetClient, entity as Entity, eid as int)
		base.init
		_texture = texture
		_batch = batch
		_client = client
		_e = entity
		_eid = eid
	
	def draw
		p = Vector2(_e.pos.x, _e.pos.y)
		_batch.draw(_texture, p, Color.white)
	
	def move(dx as int, dy as int)
		# todo sanity check
		_e.pos = Point(_e.pos.x + dx, _e.pos.y + dy)
		msg = Message.writeToWire(MoveMessage(_eid, _e.pos), _client)
		_client.sendMessage(msg, NetDeliveryMethod.ReliableOrdered)
	
class SherlockGame inherits Game
	var _graphics as GraphicsDeviceManager
	var _spriteBatch as SpriteBatch?
	var _client as NetClient
	var _state as ClientState?

	cue init(client as NetClient)
		base.init
		_graphics = GraphicsDeviceManager(this)
		_client = client

	def loadContent is override, protected
		_spriteBatch = SpriteBatch(_graphics.graphicsDevice)
		_state = ClientState(_client, _spriteBatch, _graphics)

	def unloadContent is override, protected
		pass

	def update(gameTime as GameTime?) is override, protected
		assert _state
		keys = Keyboard.getState
		for sprite in _state.sprites
			if keys.isKeyDown(Keys.Left)
				sprite.move(-1, 0)
			if keys.isKeyDown(Keys.Right)
				sprite.move(1, 0)
			if keys.isKeyDown(Keys.Up)
				sprite.move(0, -1)
			if keys.isKeyDown(Keys.Down)
				sprite.move(0, 1)

		while true
			msg = _client.readMessage
			if not msg
				break
			if msg.messageType == NetIncomingMessageType.Data
				m = Message.readCommandFromWire(msg to !)
				m.execute(_client, _state to !)
			_client.recycle(msg)

		base.update(gameTime)

	def draw(gameTime as GameTime?) is override, protected
		_graphics.graphicsDevice.clear(Color.cornflowerBlue)
		_spriteBatch.begin
		for sprite in _state.sprites
			sprite.draw
		_spriteBatch.end
		base.draw(gameTime)

class SherlockClient
	def main
		config = NetPeerConfiguration("MyExampleName")
		client = NetClient(config)
		client.start
		client.connect('localhost', 14242)
		msg = Message.writeToWire(AddMessage(0, Entity(Point(0, 0))), client)
		client.sendMessage(msg, NetDeliveryMethod.ReliableOrdered)
		SherlockGame(client).run
