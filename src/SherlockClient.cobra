@ref "bin/Lidgren.Network.dll"
@ref "bin/sfmlnet-graphics.dll"
@ref "bin/sfmlnet-window.dll"

use Lidgren.Network
use SFML.Window
use SFML.Graphics

class SherlockGame
	var _client as NetClient
	var _window as RenderWindow?
	var _input as Input?
	var _state as ClientState

	cue init(client as NetClient)
		base.init
		_client = client
		_state = ClientState(client)
	
	def move(dx as int, dy as int)
		for e in _state.entities.values
			e.pos = Point(e.pos.x + dx, e.pos.y + dy)

	def handleInput
		# Input that we want to handle per-frame rather than as a series of events - mouse position and arrow keys.
		if _input.isKeyDown(KeyCode.Left)
			.move(-1, 0)
		if _input.isKeyDown(KeyCode.Right)
			.move(1, 0)
		if _input.isKeyDown(KeyCode.Up)
			.move(0, -1)
		if _input.isKeyDown(KeyCode.Down)
			.move(0, 1)
	
	def handleMessages
		while true
			msg = _client.readMessage
			if not msg
				break
			if msg.messageType == NetIncomingMessageType.Data
				m = Message.readCommandFromWire(msg to !)
				m.execute(_client, _state)
			_client.recycle(msg)
	
	def draw
		_window.clear
		for id, e in _state.entities
			s = _state.sprites[id]
			s.position = Vector2(e.pos.x, e.pos.y)
			_window.draw(s)
	
	def onClosed(o as Object, args as EventArgs)
		_window.close
	
	def onKeyPressed(o as Object, args as KeyEventArgs)
		pass

	def onResized(o as Object, args as SizeEventArgs)
		pass
	
	def run
		_window = RenderWindow(VideoMode(800, 600, 32), "SFML Graphics")
		_window.setFramerateLimit(60)
		_window.clear
		_input = _window.input
		listen _window.closed, EventHandler(ref .onClosed)
		listen _window.keyPressed, EventHandler<of KeyEventArgs>(ref .onKeyPressed)
		listen _window.resized, EventHandler<of SizeEventArgs>(ref .onResized)
		while _window.isOpened
			.handleInput
			_window.dispatchEvents
			.handleMessages
			.draw
			_window.display

class SherlockClient
	def main
		config = NetPeerConfiguration("MyExampleName")
		client = NetClient(config)
		client.start
		client.connect('localhost', 14242)
		msg = Message.writeToWire(AddMessage(Entity()), client)
		client.sendMessage(msg, NetDeliveryMethod.ReliableOrdered)
		SherlockGame(client).run
