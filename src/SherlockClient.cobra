@ref "C:\Program Files\Microsoft XNA\XNA Game Studio\v3.1\References\Windows\x86\Microsoft.Xna.Framework.dll"
@ref "C:\Program Files\Microsoft XNA\XNA Game Studio\v3.1\References\Windows\x86\Microsoft.Xna.Framework.Game.dll"
@ref "C:\Users\me\code\sherlock\bin\Lidgren.Network.dll"

use Microsoft.Xna.Framework
use Microsoft.Xna.Framework.Graphics
use Microsoft.Xna.Framework.Input
use Lidgren.Network

class Sprite
	var _texture as Texture2D
	var _batch as SpriteBatch
	var _pos as Vector2
	var _client as NetClient

	cue init(texture as Texture2D, batch as SpriteBatch, client as NetClient)
		base.init
		_pos = Vector2(0, 0)
		_texture = texture
		_batch = batch
		_client = client
	
	def draw
		_batch.draw(_texture, _pos, Color.white)
	
	def setPos(p as Point)
		p = Vector2.max(Vector2.min(Vector2.add(_pos, Vector2(dx, dy)), Vector2(100, 100)), Vector2(0, 0))
		msg = MoveMessage(0, p.x, p.y).writeToWire(_client)
		_client.sendMessage(msg, NetDeliveryMethod.ReliableOrdered)
	
	def setPos(pos as Point)
		_pos = pos

class SherlockGame inherits Game
	var _graphics as GraphicsDeviceManager
	var _spriteBatch as SpriteBatch?
	var _client as NetClient
	var _state as 
	var _sprite as Sprite?

	cue init(client as NetClient)
		base.init
		_graphics = GraphicsDeviceManager(this)
		_client = client

	def loadContent is override, protected
		_spriteBatch = SpriteBatch(_graphics.graphicsDevice)
		_sprite = Sprite(Texture2D.fromFile(_graphics.graphicsDevice, "data/kitten.jpg"), _spriteBatch)

	def unloadContent is override, protected
		pass

	def update(gameTime as GameTime?) is override, protected
		keys = Keyboard.getState
		if keys.isKeyDown(Keys.Left)
			_sprite.move(-1, 0)
		if keys.isKeyDown(Keys.Right)
			_sprite.move(1, 0)
		if keys.isKeyDown(Keys.Up)
			_sprite.move(0, -1)
		if keys.isKeyDown(Keys.Down)
			_sprite.move(0, 1)

		while true
			msg = server.readMessage
			if not msg
				break
			if msg.messageType == NetIncomingMessageType.Data
				m = Message.readFromWire(msg, state)
				m.execute(nil, state)
			server.recycle(msg)


		base.update(gameTime)

	def draw(gameTime as GameTime?) is override, protected
		_graphics.graphicsDevice.clear(Color.cornflowerBlue)
		_spriteBatch.begin
		_sprite.draw
		_spriteBatch.end
		base.draw(gameTime)

class SherlockClient
	def main
		config = NetPeerConfiguration("MyExampleName")
		client = NetClient(config)
		client.start
		client.connect('localhost', 14242)
		msg = AddRequest().writeToWire(client)
		client.sendMessage(msg, NetDeliveryMethod.ReliableOrdered)
		SherlockGame(client).run
