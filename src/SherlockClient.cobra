@ref "C:\Program Files\Microsoft XNA\XNA Game Studio\v3.1\References\Windows\x86\Microsoft.Xna.Framework.dll"
@ref "C:\Program Files\Microsoft XNA\XNA Game Studio\v3.1\References\Windows\x86\Microsoft.Xna.Framework.Game.dll"
@ref "C:\Users\me\code\sherlock\bin\Lidgren.Network.dll"

use Microsoft.Xna.Framework
use Microsoft.Xna.Framework.Content
use Microsoft.Xna.Framework.Graphics
use Microsoft.Xna.Framework.Input
use Lidgren.Network

class SherlockGame inherits Game
    var graphics as GraphicsDeviceManager
    var spriteBatch as SpriteBatch?
	var position = Vector2(0, 0)
	var spriteTexture as Texture2D?
	var client as NetClient

    cue init(client as NetClient)
        base.init
        .graphics = GraphicsDeviceManager(this)
        .content.rootDirectory = "data"
		.client = client

    def loadContent is override, protected
        .spriteBatch = SpriteBatch(.graphicsDevice)
		.spriteTexture = Texture2D.fromFile(.graphicsDevice, "data/kitten.jpg")

    def unloadContent is override, protected
        pass

    def update(gameTime as GameTime?) is override, protected
        if GamePad.getState(PlayerIndex.One).buttons.back == ButtonState.Pressed
            .exit
        base.update(gameTime)

    def draw(gameTime as GameTime?) is override, protected
        .graphicsDevice.clear(Color.cornflowerBlue)
		.spriteBatch.begin
		.spriteBatch.draw(.spriteTexture, .position, Color.white)
		.spriteBatch.end
        base.draw(gameTime)

class SherlockClient
    def main
		config = NetPeerConfiguration("MyExampleName")
		client = NetClient(config)
		client.start
		client.connect('localhost', 14242)
		msg = LoginRequest('poop').writeToWire(client)
		client.sendMessage(msg, NetDeliveryMethod.ReliableOrdered)
		msg = PoopRequest(31337).writeToWire(client)
		client.sendMessage(msg, NetDeliveryMethod.ReliableOrdered)
		SherlockGame(client).run
