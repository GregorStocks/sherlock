use System
use System.Collections.Generic
use Microsoft.Xna.Framework
use Microsoft.Xna.Framework.Audio
use Microsoft.Xna.Framework.Content
use Microsoft.Xna.Framework.GamerServices
use Microsoft.Xna.Framework.Graphics
use Microsoft.Xna.Framework.Input
use Microsoft.Xna.Framework.Media
use Microsoft.Xna.Framework.Net
use Microsoft.Xna.Framework.Storage

@ref "C:\Program Files\Microsoft XNA\XNA Game Studio\v3.1\References\Windows\x86\Microsoft.Xna.Framework.dll"
@ref "C:\Program Files\Microsoft XNA\XNA Game Studio\v3.1\References\Windows\x86\Microsoft.Xna.Framework.Game.dll"

class SherlockGame inherits Game
    var graphics as GraphicsDeviceManager
    var spriteBatch as SpriteBatch?
	var position = Vector2(0, 0)
	var spriteTexture as Texture2D?

    cue init
        base.init
        .graphics = GraphicsDeviceManager(this)
        .content.rootDirectory = "data"

    def loadContent is override, protected
        .spriteBatch = SpriteBatch(.graphicsDevice)
		.spriteTexture = Texture2D.fromFile(.graphicsDevice, "data/kitten.jpg")

    def unloadContent is override, protected
        pass

    def update(gameTime as GameTime?) is override, protected
        if GamePad.getState(PlayerIndex.One).buttons.back == ButtonState.Pressed
            .exit
        base.update(gameTime)

    def draw(gameTime as GameTime?) is override, protected
        .graphicsDevice.clear(Color.cornflowerBlue)
		.spriteBatch.begin
		.spriteBatch.draw(.spriteTexture, .position, Color.white)
		.spriteBatch.end
        base.draw(gameTime)

class Program
    def main
		SherlockGame().run
