@ref "bin/IronPython.dll"
@ref "bin/Microsoft.Scripting.dll"
@ref "bin/Microsoft.Scripting.Core.dll"

use IronPython
use System.Security
use System.Security.Policy
use System.Security.Permissions
use Microsoft.Scripting.Hosting

class Script
	var _engine as ScriptEngine
	var _scope as ScriptScope
	cue init
		.init('C:/users/me/code/sherlock/scripts')

	cue init(scriptDir as String)
		base.init
		setup = AppDomainSetup()
		setup.applicationBase = AppDomain.currentDomain.baseDirectory
		setup.applicationName = 'Testing'

		evidence = Evidence()
		evidence.addHost(Zone(SecurityZone.Internet))

		perms = PermissionSet(PermissionState.None)
		perms.addPermission(SecurityPermission(SecurityPermissionFlag(Execution, SerializationFormatter)))
		perms.addPermission(FileIOPermission(FileIOPermissionAccess.Read, scriptDir))

		sandbox = AppDomain.createDomain('Sandbox', evidence, setup, perms)

		_engine = IronPython.Hosting.Python.createEngine(sandbox) to !
		_scope = _engine.createScope to !
	
	def executeFile(filename as String)
		test
			script = Script('C:/users/me/code/sherlock/test/scripts')
			script.executeFile('C:/users/me/code/sherlock/test/scripts/nop.py')
			try
				# script.executeFile('scripts/base.py')
				assert false, 'should have gotten an exception when executing non-test script'
			catch
				pass
		# Func<int, bool> IsOdd = scope.GetVariable<Func<int, bool>>('isodd');
		body
			_engine.createScriptSourceFromFile(filename).execute(_scope)

	def executeString(str as String)
		_engine.createScriptSourceFromString(str).execute(_scope)
		
