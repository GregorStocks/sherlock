use Lidgren.Network

class MoveData implements MessageData
	pro id from var as int
	pro pos from var as Point?
	cue init
		.init(0, nil)
	
	cue init(id as int, pos as Point?)
		base.init
		.id = 0
		.pos = Point()
	
	def read(m as NetIncomingMessage)
		.id = Util.readId(m)
		.pos = Point.read(m)

	def write(m as NetOutgoingMessage)
		Util.writeId(m, .id)
		.pos.write(m)

	def toString as String is override
		return 'Move [.id] to [.pos]'

class MoveRequest inherits Request has MessageType(3)
	cue init
		base.init(MoveData())

	def execute(peer as NetPeer, s as ServerState) is override
		print 'a'

class MoveCommand inherits Command has MessageType(4)
	cue init
		base.init(MoveData())
	
	cue init(id as int, pos as Point)
		base.init(MoveData(id, pos))

	def execute(peer as NetPeer, s as ClientState) is override
		print 'b'
