use Lidgren.Network
use System.Reflection

class MessageTypeAttribute inherits Attribute has AttributeUsage(AttributeTargets.Class)
	var id as int
	cue init(id as int)
		base.init
		.id = id

class Message
	def readRequestFromWire(m as NetIncomingMessage) as IRequest is shared
		msg = .readFromWire(m)
		if msg inherits IRequest
			return msg
		throw Exception('Not a request!')

	def readCommandFromWire(m as NetIncomingMessage) as ICommand is shared
		msg = .readFromWire(m)
		if msg inherits ICommand
			return msg
		throw Exception('Not a command!')
	
	def readFromWire(m as NetIncomingMessage) as IMessage is shared
		"""Parses the given message and returns the result of that parsing."""
		test
			for t in .getMessageTypes.values
				constructor = t.getConstructor(Type[](0))
				assert constructor
		body
			messageType = m.readVariableInt32
			t as Type?
			if .getMessageTypes.tryGetValue(messageType, out t)
				constructor = t.getConstructor(Type[](0)) ? Util.die<of ConstructorInfo>('No constructor for [t]')
				result = constructor.invoke(Type[](0)) to IMessage
				result.read(m)
				return result
			else
				# TODO: handle this better, don't crash on a mean packet
				throw Exception()
	
	def writeToWire(m as IMessage, peer as NetPeer) as NetOutgoingMessage is shared
		"""Creates the message, but does not send it. Badly named."""
		msg = peer.createMessage
		if msg
			attrs = System.Attribute.getCustomAttributes(m.getType)
			id as int?
			for attr in attrs
				if attr inherits MessageTypeAttribute
					a = attr as MessageTypeAttribute
					id = a.id
			msg.writeVariableInt32(id ? Util.die<of int>('No id found for [m.getType]'))
			m.write(msg)
			return msg
		else
			throw Exception()
	
	var _types as IDictionary<of int, Type>? is shared
	def getMessageTypes as IDictionary<of int, Type> is shared, private
		"""Returns a messagetypeid->messagetype mapping containing all message types."""
		if _types is not nil
			return _types
		_types = Dictionary<of int, Type>()
		for t in Assembly.getExecutingAssembly.getTypes
			for attr in System.Attribute.getCustomAttributes(t)
				if attr inherits MessageTypeAttribute
					a = attr as MessageTypeAttribute
					assert not _types.containsKey(a.id)
					_types.add(a.id, t)
		return _types to !

interface IMessage
	def read(m as NetIncomingMessage)
	def write(m as NetOutgoingMessage)

interface IRequest inherits IMessage
	def execute(peer as NetPeer, s as ServerState)
		"""Executes this request on the server receiving it."""

interface ICommand inherits IMessage
	def execute(peer as NetPeer, s as ClientState)
		"""Executes this command on the client receiving it."""

