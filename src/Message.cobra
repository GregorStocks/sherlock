use Lidgren.Network
use System.Reflection

class MessageTypeAttribute inherits Attribute has AttributeUsage(AttributeTargets.Class)
	var num as int
	cue init(num as int)
		base.init
		.num = num

class Message is abstract
	def readFromWire(m as NetIncomingMessage) as Message is shared
		"""Parses the given message and returns the result of that parsing."""
		test
			for t in .getMessageTypes.values
				constructor = t.getConstructor(Type[](0))
				assert constructor is not nil
		body
			messageType = m.readVariableInt32
			t as Type?
			if .getMessageTypes.tryGetValue(messageType, out t)
				constructor = t.getConstructor(Type[](0))
				if constructor is nil
					throw Exception()
				result = constructor.invoke(Type[](0)) to Message
				result.parse(m)
				return result
			else
				# TODO: handle this better, don't crash on a mean packet
				throw Exception()
	
	def parse(m as NetIncomingMessage) is abstract
	
	def writeToWire(peer as NetPeer) as NetOutgoingMessage
		"""Creates the message, but does not send it. Badly named."""
		msg = peer.createMessage
		if msg
			attrs = System.Attribute.getCustomAttributes(.getType)
			id as int?
			for attr in attrs
				if attr inherits MessageTypeAttribute
					a = attr as MessageTypeAttribute
					id = a.num
			if id is not nil
				msg.writeVariableInt32(id)
			else
				throw Exception()
			.write(msg)
			return msg
		else
			throw Exception()
	
	def write(m as NetOutgoingMessage) is abstract
	
	var _types as IDictionary<of int, Type>? is shared
	def getMessageTypes as IDictionary<of int, Type> is shared, private
		"""Returns a messagetypeid->messagetype mapping containing all message types."""
		if _types is not nil
			return _types
		_types = Dictionary<of int, Type>()
		for t in Assembly.getExecutingAssembly.getTypes
			for attr in System.Attribute.getCustomAttributes(t)
				if attr inherits MessageTypeAttribute
					a = attr as MessageTypeAttribute
					assert not _types.containsKey(a.num)
					_types.add(a.num, t)
		return _types to !

class LoginRequest inherits Message has MessageType(1)
	var msg as String

	cue init
		.init('')

	cue init(msg as String)
		base.init
		.msg = msg

	def parse(m as NetIncomingMessage) is override
		s = m.readString
		if s
			.msg = s
		else
			throw Exception()

	def write(m as NetOutgoingMessage) is override
		m.write(.msg)
	
	def toString as String is override
		return 'LoginRequest [.msg]'

class PoopRequest inherits Message has MessageType(2)
	var num as int

	cue init
		.init(0)
	
	cue init(num as int)
		base.init
		.num = num
	
	def parse(m as NetIncomingMessage) is override
		num = m.readVariableInt32
		if num
			.num = num
		else
			throw Exception()

	def write(m as NetOutgoingMessage) is override
		m.writeVariableInt32(.num)

	def toString as String is override
		return 'PoopRequest [.num]'
