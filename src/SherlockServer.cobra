@ref "bin/Lidgren.Network.dll"
@ref "bin/IronPython.dll"
@ref "bin/Microsoft.Scripting.dll"
@ref "bin/Microsoft.Scripting.Core.dll"

use Lidgren.Network
use IronPython
use System.Security
use System.Security.Policy
use System.Security.Permissions

class SherlockServer
	def main
		config = NetPeerConfiguration("MyExampleName")
		config.port = 14242
		server = NetServer(config)
		server.start
		state = ServerState(server)

		setup = AppDomainSetup()
		setup.applicationBase = AppDomain.currentDomain.baseDirectory
		setup.applicationName = "Testing"

		evidence = Evidence()
		evidence.addHost(Zone(SecurityZone.Internet))

		csharp'perms = SecurityManager.getStandardSandbox(evidence)'
		perms.addPermission(FileIOPermission(FileIOPermissionAccess.Read, "scripts"))

		sandbox = AppDomain.createDomain("Sandbox", evidence, setup)

		engine = IronPython.Hosting.Python.createEngine(sandbox)
		scope = engine.createScope
		
		script = StreamReader('scripts/base.py').readToEnd
		scriptSource = engine.createScriptSourceFromString(script)
		scriptSource.execute(scope)

		while true
			msg = server.readMessage
			if not msg
				continue
			branch msg.messageType
				on NetIncomingMessageType.VerboseDebugMessage or NetIncomingMessageType.DebugMessage _
						or NetIncomingMessageType.WarningMessage or NetIncomingMessageType.ErrorMessage
					print msg.readString
				on NetIncomingMessageType.StatusChanged
					status = msg.readByte
					reason = msg.readString
					print '[msg.senderConnection] status: [status] ([reason])'
				on NetIncomingMessageType.Data
					m = Message.readRequestFromWire(msg to !)
					m.execute(msg.senderConnection to !, state)
			server.recycle(msg)

